# -------------------------------------------------------------------------------------------------
# General settings

# Set prefix key to Alt+f
unbind C-b
set -g prefix M-f
bind M-f send-prefix

set -g default-terminal "tmux-256color"
set -g history-limit 60000
# set -g default-shell /bin/zsh

# Start index of window/pane with 1
set -g base-index 1
setw -g pane-base-index 1

# WIP: Export some files location for situational awareness
set-environment -g TMUX_CONF "$XDG_CONFIG_HOME/tmux/tmux.conf"



# -------------------------------------------------------------------------------------------------
# Key bindings

# Unbind default key bindings, we're going to override
unbind [    # paste-buffer
unbind ]    
unbind &    # kill-window
unbind %    # Split window horizontally

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-nano} $XDG_CONFIG_HOME/tmux/tmux.conf && tmux source $XDG_CONFIG_HOME/tmux/tmux.conf && tmux display \"$XDG_CONFIG_HOME/tmux/tmux.conf reloaded\"'"

# Reload tmux configuration 
# bind C-r source-file ~/.tmux.conf \; display "Config reloaded"
bind C-r run 'tmux source-file "$TMUX_CONF"' \; display "#{TMUX_CONF} reloaded"

# new window / pane and retain cwd
bind c new-window -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# Double click on the window list to open a new window
bind -n DoubleClick1Status new-window -c "#{pane_current_path}"

# Select pane and windows
# bind -r [ select-pane -t :.-
# bind -r ] select-pane -t :.+
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# swap-pane
unbind '{'    # swap pane with the pane above
unbind '}'    # swap pane with the pane below
bind -r J swap-pane -D
bind -r K swap-pane -U

# join-pane
bind-key "c-\\" choose-tree "join-pane -h -s "%%""
bind-key c-g choose-tree "join-pane -v -s "%%""  # same sequence as c-'. Explanation: https://superuser.com/a/764449

# window navigation
unbind n
unbind p
bind -r [ previous-window
bind -r ] next-window
# bind -r C-h previous-window # select previous window
# bind -r C-l next-window     # select next window
# bind Tab last-window        # move to last active window

# Zoom pane
# bind + resize-pane -Z # default on z

# Toggle status bar
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Toggle pane status bar    
unbind q # Display pane numbers
bind q if -F '#{s/off//:pane-border-status}' 'set -g pane-border-status off' 'set -g pane-border-status top'
# Change pane title
bind Q command-prompt -p "New pane title: " "select-pane -T '%1'"

# -------------------------------------------------------------------------------------------------
# Copy mode

bind Escape copy-mode

set -g mouse on
set -s set-clipboard off # fixes copy with a mouse
# Toggle mouse on/off
# bind-key C-m \
# set-option -gF mouse "#{?mouse,off,on}" \;\
# display-message "#{?mouse,Mouse: ON,Mouse: OFF}"

# TODO: consider https://github.com/tmux-plugins/tmux-yank
# Base command: bind -Tcopy-mode MouseDragEnd1Pane send -X copy-pipe[-and-cancel] "<OS/distro-specific clipboard interface program>"
# X11: xsel -i -b / xclip -i -selection clipboard; Wayland: wl-copy; macOS: pbcopy, reattach-to-user-namespace pbcopy; Windows: clip.exe
if -b 'command -v xclip > /dev/null 2>&1' 'bind -Tcopy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel "xclip -in -selection clipboard >/dev/null 2>&1"'
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind -Tcopy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel "clip.exe"'

# Clipboard integration
# ctrl+c to send to clipboard
# bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
# ctrl+v to paste from clipboard
# bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# # Selection with mouse should copy to clipboard right away, in addition to the default action.
# unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
# bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\; run "tmux save-buffer - | xclip -i -sel clipboard > /dev/null"

# Middle click to paste from the clipboard # Messed up (pasts wrong clipboard)
unbind-key MouseDown2Pane
bind -n MouseDown2Pane run "tmux set-buffer \"$(xclip -out -selection clipboard)\"; tmux paste-buffer"


# # Drag to re-order windows
# bind -n MouseDrag1Status swap-window -t=

# Kill pane/window/session shortcuts
bind x confirm-before -p "kill pane? (y/n)" kill-pane
bind X confirm-before -p "kill window #I:#W? (y/n)" kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind "C-M-x" confirm-before -p "kill session #S? (y/n)" kill-session

# Paste IP of a tun0 interface
# bind M-c run-shell "tmux set-buffer \"$(get_tunnel_ip)\"; tmux paste-buffer"\; display-message "Getting tunnel IP..."
bind M-c run-shell -b 'tmux set-buffer -b tun_ip "$(get_tunnel_ipv4.zsh)"; tmux paste-buffer -b tun_ip; tmux delete-buffer -b tun_ip'

# -------------------------------------------------------------------------------------------------
# Theme

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"


# -------------------------------------------------------------------------------------------------
# Theme: Appearence and status bar

set -g clock-mode-colour "$color_orange"

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed | #(get_tunnel_ipv4.zsh) | $wg_user_host | $wg_date"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"


# -------------------------------------------------------------------------------------------------
# Plugins

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible' # basic non-intrusive tmux settings
set -g @plugin 'tmux-plugins/tmux-prefix-highlight' # no longer in development since 2021

set -g @plugin 'tmux-plugins/tmux-logging'
# set -g @logging-path "$HOME/.tmux/logging"
# bind P logging_key
# bind M-p screen-capture-key
# bind M-P save-complete-history-key
# bind M-c clear-history-key

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm'
